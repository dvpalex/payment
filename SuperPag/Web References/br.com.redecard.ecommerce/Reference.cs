//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
#pragma warning disable 1591

namespace SuperPag.br.com.redecard.ecommerce {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="komerci_captureSoap", Namespace="http://ecommerce.redecard.com.br")]
    public partial class komerci_capture : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetAuthorizedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorized_ADOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorizedAVSOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmTxnOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmTxn_ADOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfPreAuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidTransactionDistrOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidPreAuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidConfPreAuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CouncilReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsFornDistribOperationCompleted;
        
        private System.Threading.SendOrPostCallback SalesSummOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorizedCAPOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReversalTxnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorizedTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorizedAVSTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmTxnTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfPreAuthorizationTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidTransactionTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidPreAuthorizationTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback VoidConfPreAuthorizationTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback CouncilReportTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback SalesSummTstOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthorizedCAPtstOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public komerci_capture() {
            this.Url = global::SuperPag.Properties.Settings.Default.SuperPag_br_com_redecard_ecommerce_komerci_capture;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetAuthorizedCompletedEventHandler GetAuthorizedCompleted;
        
        /// <remarks/>
        public event GetAuthorized_ADCompletedEventHandler GetAuthorized_ADCompleted;
        
        /// <remarks/>
        public event GetAuthorizedAVSCompletedEventHandler GetAuthorizedAVSCompleted;
        
        /// <remarks/>
        public event ConfirmTxnCompletedEventHandler ConfirmTxnCompleted;
        
        /// <remarks/>
        public event ConfirmTxn_ADCompletedEventHandler ConfirmTxn_ADCompleted;
        
        /// <remarks/>
        public event ConfPreAuthorizationCompletedEventHandler ConfPreAuthorizationCompleted;
        
        /// <remarks/>
        public event VoidTransactionCompletedEventHandler VoidTransactionCompleted;
        
        /// <remarks/>
        public event VoidTransactionDistrCompletedEventHandler VoidTransactionDistrCompleted;
        
        /// <remarks/>
        public event VoidPreAuthorizationCompletedEventHandler VoidPreAuthorizationCompleted;
        
        /// <remarks/>
        public event VoidConfPreAuthorizationCompletedEventHandler VoidConfPreAuthorizationCompleted;
        
        /// <remarks/>
        public event CouncilReportCompletedEventHandler CouncilReportCompleted;
        
        /// <remarks/>
        public event ConsFornDistribCompletedEventHandler ConsFornDistribCompleted;
        
        /// <remarks/>
        public event SalesSummCompletedEventHandler SalesSummCompleted;
        
        /// <remarks/>
        public event GetAuthorizedCAPCompletedEventHandler GetAuthorizedCAPCompleted;
        
        /// <remarks/>
        public event ReversalTxnCompletedEventHandler ReversalTxnCompleted;
        
        /// <remarks/>
        public event GetAuthorizedTstCompletedEventHandler GetAuthorizedTstCompleted;
        
        /// <remarks/>
        public event GetAuthorizedAVSTstCompletedEventHandler GetAuthorizedAVSTstCompleted;
        
        /// <remarks/>
        public event ConfirmTxnTstCompletedEventHandler ConfirmTxnTstCompleted;
        
        /// <remarks/>
        public event ConfPreAuthorizationTstCompletedEventHandler ConfPreAuthorizationTstCompleted;
        
        /// <remarks/>
        public event VoidTransactionTstCompletedEventHandler VoidTransactionTstCompleted;
        
        /// <remarks/>
        public event VoidPreAuthorizationTstCompletedEventHandler VoidPreAuthorizationTstCompleted;
        
        /// <remarks/>
        public event VoidConfPreAuthorizationTstCompletedEventHandler VoidConfPreAuthorizationTstCompleted;
        
        /// <remarks/>
        public event CouncilReportTstCompletedEventHandler CouncilReportTstCompleted;
        
        /// <remarks/>
        public event SalesSummTstCompletedEventHandler SalesSummTstCompleted;
        
        /// <remarks/>
        public event GetAuthorizedCAPtstCompletedEventHandler GetAuthorizedCAPtstCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/GetAuthorized", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAuthorized(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data) {
            object[] results = this.Invoke("GetAuthorized", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn,
                        Add_Data});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizedAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data) {
            this.GetAuthorizedAsync(Total, Transacao, Parcelas, Filiacao, NumPedido, Nrcartao, CVC2, Mes, Ano, Portador, IATA, Distribuidor, Concentrador, TaxaEmbarque, Entrada, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, ConfTxn, Add_Data, null);
        }
        
        /// <remarks/>
        public void GetAuthorizedAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data, 
                    object userState) {
            if ((this.GetAuthorizedOperationCompleted == null)) {
                this.GetAuthorizedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedOperationCompleted);
            }
            this.InvokeAsync("GetAuthorized", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn,
                        Add_Data}, this.GetAuthorizedOperationCompleted, userState);
        }
        
        private void OnGetAuthorizedOperationCompleted(object arg) {
            if ((this.GetAuthorizedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizedCompleted(this, new GetAuthorizedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/GetAuthorized_AD", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAuthorized_AD(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string Add_Data) {
            object[] results = this.Invoke("GetAuthorized_AD", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        Add_Data});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorized_ADAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string Add_Data) {
            this.GetAuthorized_ADAsync(Total, Transacao, Parcelas, Filiacao, NumPedido, Nrcartao, CVC2, Mes, Ano, Portador, IATA, Distribuidor, Concentrador, TaxaEmbarque, Entrada, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, Add_Data, null);
        }
        
        /// <remarks/>
        public void GetAuthorized_ADAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string Add_Data, 
                    object userState) {
            if ((this.GetAuthorized_ADOperationCompleted == null)) {
                this.GetAuthorized_ADOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorized_ADOperationCompleted);
            }
            this.InvokeAsync("GetAuthorized_AD", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        Add_Data}, this.GetAuthorized_ADOperationCompleted, userState);
        }
        
        private void OnGetAuthorized_ADOperationCompleted(object arg) {
            if ((this.GetAuthorized_ADCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorized_ADCompleted(this, new GetAuthorized_ADCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/GetAuthorizedAVS", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAuthorizedAVS(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string CPF, 
                    string Endereco, 
                    string Num1, 
                    string Complemento, 
                    string Cep1, 
                    string Cep2, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4) {
            object[] results = this.Invoke("GetAuthorizedAVS", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        CPF,
                        Endereco,
                        Num1,
                        Complemento,
                        Cep1,
                        Cep2,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizedAVSAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string CPF, 
                    string Endereco, 
                    string Num1, 
                    string Complemento, 
                    string Cep1, 
                    string Cep2, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4) {
            this.GetAuthorizedAVSAsync(Total, Transacao, Parcelas, Filiacao, NumPedido, Nrcartao, CVC2, Mes, Ano, Portador, CPF, Endereco, Num1, Complemento, Cep1, Cep2, IATA, Distribuidor, Concentrador, TaxaEmbarque, Entrada, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, null);
        }
        
        /// <remarks/>
        public void GetAuthorizedAVSAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string CPF, 
                    string Endereco, 
                    string Num1, 
                    string Complemento, 
                    string Cep1, 
                    string Cep2, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    object userState) {
            if ((this.GetAuthorizedAVSOperationCompleted == null)) {
                this.GetAuthorizedAVSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedAVSOperationCompleted);
            }
            this.InvokeAsync("GetAuthorizedAVS", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        CPF,
                        Endereco,
                        Num1,
                        Complemento,
                        Cep1,
                        Cep2,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4}, this.GetAuthorizedAVSOperationCompleted, userState);
        }
        
        private void OnGetAuthorizedAVSOperationCompleted(object arg) {
            if ((this.GetAuthorizedAVSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizedAVSCompleted(this, new GetAuthorizedAVSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/ConfirmTxn", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConfirmTxn(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string AddData) {
            object[] results = this.Invoke("ConfirmTxn", new object[] {
                        Data,
                        NumSqn,
                        NumCV,
                        NumAutor,
                        Parcelas,
                        TransOrig,
                        Total,
                        Filiacao,
                        Distribuidor,
                        NumPedido,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        AddData});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmTxnAsync(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string AddData) {
            this.ConfirmTxnAsync(Data, NumSqn, NumCV, NumAutor, Parcelas, TransOrig, Total, Filiacao, Distribuidor, NumPedido, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, AddData, null);
        }
        
        /// <remarks/>
        public void ConfirmTxnAsync(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string AddData, 
                    object userState) {
            if ((this.ConfirmTxnOperationCompleted == null)) {
                this.ConfirmTxnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmTxnOperationCompleted);
            }
            this.InvokeAsync("ConfirmTxn", new object[] {
                        Data,
                        NumSqn,
                        NumCV,
                        NumAutor,
                        Parcelas,
                        TransOrig,
                        Total,
                        Filiacao,
                        Distribuidor,
                        NumPedido,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        AddData}, this.ConfirmTxnOperationCompleted, userState);
        }
        
        private void OnConfirmTxnOperationCompleted(object arg) {
            if ((this.ConfirmTxnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmTxnCompleted(this, new ConfirmTxnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/ConfirmTxn_AD", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConfirmTxn_AD(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string Cod_Banco, 
                    string Origem_Bin, 
                    string AddData) {
            object[] results = this.Invoke("ConfirmTxn_AD", new object[] {
                        Data,
                        NumSqn,
                        NumCV,
                        NumAutor,
                        Parcelas,
                        TransOrig,
                        Total,
                        Filiacao,
                        Distribuidor,
                        NumPedido,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        Cod_Banco,
                        Origem_Bin,
                        AddData});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmTxn_ADAsync(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string Cod_Banco, 
                    string Origem_Bin, 
                    string AddData) {
            this.ConfirmTxn_ADAsync(Data, NumSqn, NumCV, NumAutor, Parcelas, TransOrig, Total, Filiacao, Distribuidor, NumPedido, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, Cod_Banco, Origem_Bin, AddData, null);
        }
        
        /// <remarks/>
        public void ConfirmTxn_ADAsync(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string Cod_Banco, 
                    string Origem_Bin, 
                    string AddData, 
                    object userState) {
            if ((this.ConfirmTxn_ADOperationCompleted == null)) {
                this.ConfirmTxn_ADOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmTxn_ADOperationCompleted);
            }
            this.InvokeAsync("ConfirmTxn_AD", new object[] {
                        Data,
                        NumSqn,
                        NumCV,
                        NumAutor,
                        Parcelas,
                        TransOrig,
                        Total,
                        Filiacao,
                        Distribuidor,
                        NumPedido,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        Cod_Banco,
                        Origem_Bin,
                        AddData}, this.ConfirmTxn_ADOperationCompleted, userState);
        }
        
        private void OnConfirmTxn_ADOperationCompleted(object arg) {
            if ((this.ConfirmTxn_ADCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmTxn_ADCompleted(this, new ConfirmTxn_ADCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/ConfPreAuthorization", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConfPreAuthorization(string Filiacao, string Distribuidor, string Total, string Parcelas, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("ConfPreAuthorization", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Parcelas,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ConfPreAuthorizationAsync(string Filiacao, string Distribuidor, string Total, string Parcelas, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            this.ConfPreAuthorizationAsync(Filiacao, Distribuidor, Total, Parcelas, Data, NumAutor, NumCV, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void ConfPreAuthorizationAsync(string Filiacao, string Distribuidor, string Total, string Parcelas, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.ConfPreAuthorizationOperationCompleted == null)) {
                this.ConfPreAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfPreAuthorizationOperationCompleted);
            }
            this.InvokeAsync("ConfPreAuthorization", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Parcelas,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd}, this.ConfPreAuthorizationOperationCompleted, userState);
        }
        
        private void OnConfPreAuthorizationOperationCompleted(object arg) {
            if ((this.ConfPreAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfPreAuthorizationCompleted(this, new ConfPreAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/VoidTransaction", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VoidTransaction(string Total, string Filiacao, string NumCV, string NumAutor, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("VoidTransaction", new object[] {
                        Total,
                        Filiacao,
                        NumCV,
                        NumAutor,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VoidTransactionAsync(string Total, string Filiacao, string NumCV, string NumAutor, string Concentrador, string Usr, string Pwd) {
            this.VoidTransactionAsync(Total, Filiacao, NumCV, NumAutor, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void VoidTransactionAsync(string Total, string Filiacao, string NumCV, string NumAutor, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.VoidTransactionOperationCompleted == null)) {
                this.VoidTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidTransactionOperationCompleted);
            }
            this.InvokeAsync("VoidTransaction", new object[] {
                        Total,
                        Filiacao,
                        NumCV,
                        NumAutor,
                        Concentrador,
                        Usr,
                        Pwd}, this.VoidTransactionOperationCompleted, userState);
        }
        
        private void OnVoidTransactionOperationCompleted(object arg) {
            if ((this.VoidTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidTransactionCompleted(this, new VoidTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/VoidTransactionDistr", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VoidTransactionDistr(string Total, string Filiacao, string Data, string NumCV, string NumAutor, string Concentrador, string Distribuidor, string Usr, string Pwd) {
            object[] results = this.Invoke("VoidTransactionDistr", new object[] {
                        Total,
                        Filiacao,
                        Data,
                        NumCV,
                        NumAutor,
                        Concentrador,
                        Distribuidor,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VoidTransactionDistrAsync(string Total, string Filiacao, string Data, string NumCV, string NumAutor, string Concentrador, string Distribuidor, string Usr, string Pwd) {
            this.VoidTransactionDistrAsync(Total, Filiacao, Data, NumCV, NumAutor, Concentrador, Distribuidor, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void VoidTransactionDistrAsync(string Total, string Filiacao, string Data, string NumCV, string NumAutor, string Concentrador, string Distribuidor, string Usr, string Pwd, object userState) {
            if ((this.VoidTransactionDistrOperationCompleted == null)) {
                this.VoidTransactionDistrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidTransactionDistrOperationCompleted);
            }
            this.InvokeAsync("VoidTransactionDistr", new object[] {
                        Total,
                        Filiacao,
                        Data,
                        NumCV,
                        NumAutor,
                        Concentrador,
                        Distribuidor,
                        Usr,
                        Pwd}, this.VoidTransactionDistrOperationCompleted, userState);
        }
        
        private void OnVoidTransactionDistrOperationCompleted(object arg) {
            if ((this.VoidTransactionDistrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidTransactionDistrCompleted(this, new VoidTransactionDistrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/VoidPreAuthorization", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VoidPreAuthorization(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("VoidPreAuthorization", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VoidPreAuthorizationAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            this.VoidPreAuthorizationAsync(Filiacao, Distribuidor, Total, Data, NumAutor, NumCV, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void VoidPreAuthorizationAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.VoidPreAuthorizationOperationCompleted == null)) {
                this.VoidPreAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidPreAuthorizationOperationCompleted);
            }
            this.InvokeAsync("VoidPreAuthorization", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd}, this.VoidPreAuthorizationOperationCompleted, userState);
        }
        
        private void OnVoidPreAuthorizationOperationCompleted(object arg) {
            if ((this.VoidPreAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidPreAuthorizationCompleted(this, new VoidPreAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/VoidConfPreAuthorization", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VoidConfPreAuthorization(string Filiacao, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("VoidConfPreAuthorization", new object[] {
                        Filiacao,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VoidConfPreAuthorizationAsync(string Filiacao, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            this.VoidConfPreAuthorizationAsync(Filiacao, Total, Data, NumAutor, NumCV, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void VoidConfPreAuthorizationAsync(string Filiacao, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.VoidConfPreAuthorizationOperationCompleted == null)) {
                this.VoidConfPreAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidConfPreAuthorizationOperationCompleted);
            }
            this.InvokeAsync("VoidConfPreAuthorization", new object[] {
                        Filiacao,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd}, this.VoidConfPreAuthorizationOperationCompleted, userState);
        }
        
        private void OnVoidConfPreAuthorizationOperationCompleted(object arg) {
            if ((this.VoidConfPreAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidConfPreAuthorizationCompleted(this, new VoidConfPreAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/CouncilReport", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CouncilReport(string Filiacao, string Distribuidor, string Data_Inicial, string Data_Final, string Tipo_Trx, string Status_Trx, string Servico_AVS, string Programa, string Usr, string Pwd) {
            object[] results = this.Invoke("CouncilReport", new object[] {
                        Filiacao,
                        Distribuidor,
                        Data_Inicial,
                        Data_Final,
                        Tipo_Trx,
                        Status_Trx,
                        Servico_AVS,
                        Programa,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CouncilReportAsync(string Filiacao, string Distribuidor, string Data_Inicial, string Data_Final, string Tipo_Trx, string Status_Trx, string Servico_AVS, string Programa, string Usr, string Pwd) {
            this.CouncilReportAsync(Filiacao, Distribuidor, Data_Inicial, Data_Final, Tipo_Trx, Status_Trx, Servico_AVS, Programa, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void CouncilReportAsync(string Filiacao, string Distribuidor, string Data_Inicial, string Data_Final, string Tipo_Trx, string Status_Trx, string Servico_AVS, string Programa, string Usr, string Pwd, object userState) {
            if ((this.CouncilReportOperationCompleted == null)) {
                this.CouncilReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCouncilReportOperationCompleted);
            }
            this.InvokeAsync("CouncilReport", new object[] {
                        Filiacao,
                        Distribuidor,
                        Data_Inicial,
                        Data_Final,
                        Tipo_Trx,
                        Status_Trx,
                        Servico_AVS,
                        Programa,
                        Usr,
                        Pwd}, this.CouncilReportOperationCompleted, userState);
        }
        
        private void OnCouncilReportOperationCompleted(object arg) {
            if ((this.CouncilReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CouncilReportCompleted(this, new CouncilReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/ConsFornDistrib", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConsFornDistrib(string Filiacao, string Usr, string Pwd) {
            object[] results = this.Invoke("ConsFornDistrib", new object[] {
                        Filiacao,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ConsFornDistribAsync(string Filiacao, string Usr, string Pwd) {
            this.ConsFornDistribAsync(Filiacao, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void ConsFornDistribAsync(string Filiacao, string Usr, string Pwd, object userState) {
            if ((this.ConsFornDistribOperationCompleted == null)) {
                this.ConsFornDistribOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsFornDistribOperationCompleted);
            }
            this.InvokeAsync("ConsFornDistrib", new object[] {
                        Filiacao,
                        Usr,
                        Pwd}, this.ConsFornDistribOperationCompleted, userState);
        }
        
        private void OnConsFornDistribOperationCompleted(object arg) {
            if ((this.ConsFornDistribCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsFornDistribCompleted(this, new ConsFornDistribCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/SalesSumm", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SalesSumm(string Filiacao, string Usr, string Pwd) {
            object[] results = this.Invoke("SalesSumm", new object[] {
                        Filiacao,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SalesSummAsync(string Filiacao, string Usr, string Pwd) {
            this.SalesSummAsync(Filiacao, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void SalesSummAsync(string Filiacao, string Usr, string Pwd, object userState) {
            if ((this.SalesSummOperationCompleted == null)) {
                this.SalesSummOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSalesSummOperationCompleted);
            }
            this.InvokeAsync("SalesSumm", new object[] {
                        Filiacao,
                        Usr,
                        Pwd}, this.SalesSummOperationCompleted, userState);
        }
        
        private void OnSalesSummOperationCompleted(object arg) {
            if ((this.SalesSummCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SalesSummCompleted(this, new SalesSummCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/GetAuthorizedCAP", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAuthorizedCAP(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string SecureCode, 
                    string LinkCode, 
                    string Bin, 
                    string Portador, 
                    string IATA, 
                    string Mes, 
                    string Ano, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data) {
            object[] results = this.Invoke("GetAuthorizedCAP", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        SecureCode,
                        LinkCode,
                        Bin,
                        Portador,
                        IATA,
                        Mes,
                        Ano,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn,
                        Add_Data});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizedCAPAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string SecureCode, 
                    string LinkCode, 
                    string Bin, 
                    string Portador, 
                    string IATA, 
                    string Mes, 
                    string Ano, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data) {
            this.GetAuthorizedCAPAsync(Total, Transacao, Parcelas, Filiacao, NumPedido, SecureCode, LinkCode, Bin, Portador, IATA, Mes, Ano, Distribuidor, Concentrador, TaxaEmbarque, Entrada, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, ConfTxn, Add_Data, null);
        }
        
        /// <remarks/>
        public void GetAuthorizedCAPAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string SecureCode, 
                    string LinkCode, 
                    string Bin, 
                    string Portador, 
                    string IATA, 
                    string Mes, 
                    string Ano, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data, 
                    object userState) {
            if ((this.GetAuthorizedCAPOperationCompleted == null)) {
                this.GetAuthorizedCAPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedCAPOperationCompleted);
            }
            this.InvokeAsync("GetAuthorizedCAP", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        SecureCode,
                        LinkCode,
                        Bin,
                        Portador,
                        IATA,
                        Mes,
                        Ano,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn,
                        Add_Data}, this.GetAuthorizedCAPOperationCompleted, userState);
        }
        
        private void OnGetAuthorizedCAPOperationCompleted(object arg) {
            if ((this.GetAuthorizedCAPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizedCAPCompleted(this, new GetAuthorizedCAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/ReversalTxn", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ReversalTxn(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumSqn, string NumPedido, string Parcelas, string Usr, string Pwd) {
            object[] results = this.Invoke("ReversalTxn", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumSqn,
                        NumPedido,
                        Parcelas,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ReversalTxnAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumSqn, string NumPedido, string Parcelas, string Usr, string Pwd) {
            this.ReversalTxnAsync(Filiacao, Distribuidor, Total, Data, NumAutor, NumSqn, NumPedido, Parcelas, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void ReversalTxnAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumSqn, string NumPedido, string Parcelas, string Usr, string Pwd, object userState) {
            if ((this.ReversalTxnOperationCompleted == null)) {
                this.ReversalTxnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReversalTxnOperationCompleted);
            }
            this.InvokeAsync("ReversalTxn", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumSqn,
                        NumPedido,
                        Parcelas,
                        Usr,
                        Pwd}, this.ReversalTxnOperationCompleted, userState);
        }
        
        private void OnReversalTxnOperationCompleted(object arg) {
            if ((this.ReversalTxnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReversalTxnCompleted(this, new ReversalTxnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/GetAuthorizedTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAuthorizedTst(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn) {
            object[] results = this.Invoke("GetAuthorizedTst", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizedTstAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn) {
            this.GetAuthorizedTstAsync(Total, Transacao, Parcelas, Filiacao, NumPedido, Nrcartao, CVC2, Mes, Ano, Portador, IATA, Distribuidor, Concentrador, TaxaEmbarque, Entrada, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, ConfTxn, null);
        }
        
        /// <remarks/>
        public void GetAuthorizedTstAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    object userState) {
            if ((this.GetAuthorizedTstOperationCompleted == null)) {
                this.GetAuthorizedTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedTstOperationCompleted);
            }
            this.InvokeAsync("GetAuthorizedTst", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn}, this.GetAuthorizedTstOperationCompleted, userState);
        }
        
        private void OnGetAuthorizedTstOperationCompleted(object arg) {
            if ((this.GetAuthorizedTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizedTstCompleted(this, new GetAuthorizedTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/GetAuthorizedAVSTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAuthorizedAVSTst(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string CPF, 
                    string Endereco, 
                    string Num1, 
                    string Complemento, 
                    string Cep1, 
                    string Cep2, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4) {
            object[] results = this.Invoke("GetAuthorizedAVSTst", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        CPF,
                        Endereco,
                        Num1,
                        Complemento,
                        Cep1,
                        Cep2,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizedAVSTstAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string CPF, 
                    string Endereco, 
                    string Num1, 
                    string Complemento, 
                    string Cep1, 
                    string Cep2, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4) {
            this.GetAuthorizedAVSTstAsync(Total, Transacao, Parcelas, Filiacao, NumPedido, Nrcartao, CVC2, Mes, Ano, Portador, CPF, Endereco, Num1, Complemento, Cep1, Cep2, IATA, Distribuidor, Concentrador, TaxaEmbarque, Entrada, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, null);
        }
        
        /// <remarks/>
        public void GetAuthorizedAVSTstAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string Nrcartao, 
                    string CVC2, 
                    string Mes, 
                    string Ano, 
                    string Portador, 
                    string CPF, 
                    string Endereco, 
                    string Num1, 
                    string Complemento, 
                    string Cep1, 
                    string Cep2, 
                    string IATA, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    object userState) {
            if ((this.GetAuthorizedAVSTstOperationCompleted == null)) {
                this.GetAuthorizedAVSTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedAVSTstOperationCompleted);
            }
            this.InvokeAsync("GetAuthorizedAVSTst", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        Nrcartao,
                        CVC2,
                        Mes,
                        Ano,
                        Portador,
                        CPF,
                        Endereco,
                        Num1,
                        Complemento,
                        Cep1,
                        Cep2,
                        IATA,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4}, this.GetAuthorizedAVSTstOperationCompleted, userState);
        }
        
        private void OnGetAuthorizedAVSTstOperationCompleted(object arg) {
            if ((this.GetAuthorizedAVSTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizedAVSTstCompleted(this, new GetAuthorizedAVSTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/ConfirmTxnTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConfirmTxnTst(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4) {
            object[] results = this.Invoke("ConfirmTxnTst", new object[] {
                        Data,
                        NumSqn,
                        NumCV,
                        NumAutor,
                        Parcelas,
                        TransOrig,
                        Total,
                        Filiacao,
                        Distribuidor,
                        NumPedido,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmTxnTstAsync(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4) {
            this.ConfirmTxnTstAsync(Data, NumSqn, NumCV, NumAutor, Parcelas, TransOrig, Total, Filiacao, Distribuidor, NumPedido, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, null);
        }
        
        /// <remarks/>
        public void ConfirmTxnTstAsync(
                    string Data, 
                    string NumSqn, 
                    string NumCV, 
                    string NumAutor, 
                    string Parcelas, 
                    string TransOrig, 
                    string Total, 
                    string Filiacao, 
                    string Distribuidor, 
                    string NumPedido, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    object userState) {
            if ((this.ConfirmTxnTstOperationCompleted == null)) {
                this.ConfirmTxnTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmTxnTstOperationCompleted);
            }
            this.InvokeAsync("ConfirmTxnTst", new object[] {
                        Data,
                        NumSqn,
                        NumCV,
                        NumAutor,
                        Parcelas,
                        TransOrig,
                        Total,
                        Filiacao,
                        Distribuidor,
                        NumPedido,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4}, this.ConfirmTxnTstOperationCompleted, userState);
        }
        
        private void OnConfirmTxnTstOperationCompleted(object arg) {
            if ((this.ConfirmTxnTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmTxnTstCompleted(this, new ConfirmTxnTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/ConfPreAuthorizationTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConfPreAuthorizationTst(string Filiacao, string Distribuidor, string Total, string TransOrig, string Parcelas, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("ConfPreAuthorizationTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        TransOrig,
                        Parcelas,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void ConfPreAuthorizationTstAsync(string Filiacao, string Distribuidor, string Total, string TransOrig, string Parcelas, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            this.ConfPreAuthorizationTstAsync(Filiacao, Distribuidor, Total, TransOrig, Parcelas, Data, NumAutor, NumCV, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void ConfPreAuthorizationTstAsync(string Filiacao, string Distribuidor, string Total, string TransOrig, string Parcelas, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.ConfPreAuthorizationTstOperationCompleted == null)) {
                this.ConfPreAuthorizationTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfPreAuthorizationTstOperationCompleted);
            }
            this.InvokeAsync("ConfPreAuthorizationTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        TransOrig,
                        Parcelas,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd}, this.ConfPreAuthorizationTstOperationCompleted, userState);
        }
        
        private void OnConfPreAuthorizationTstOperationCompleted(object arg) {
            if ((this.ConfPreAuthorizationTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfPreAuthorizationTstCompleted(this, new ConfPreAuthorizationTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/VoidTransactionTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VoidTransactionTst(string Total, string Filiacao, string NumCV, string NumAutor, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("VoidTransactionTst", new object[] {
                        Total,
                        Filiacao,
                        NumCV,
                        NumAutor,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VoidTransactionTstAsync(string Total, string Filiacao, string NumCV, string NumAutor, string Concentrador, string Usr, string Pwd) {
            this.VoidTransactionTstAsync(Total, Filiacao, NumCV, NumAutor, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void VoidTransactionTstAsync(string Total, string Filiacao, string NumCV, string NumAutor, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.VoidTransactionTstOperationCompleted == null)) {
                this.VoidTransactionTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidTransactionTstOperationCompleted);
            }
            this.InvokeAsync("VoidTransactionTst", new object[] {
                        Total,
                        Filiacao,
                        NumCV,
                        NumAutor,
                        Concentrador,
                        Usr,
                        Pwd}, this.VoidTransactionTstOperationCompleted, userState);
        }
        
        private void OnVoidTransactionTstOperationCompleted(object arg) {
            if ((this.VoidTransactionTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidTransactionTstCompleted(this, new VoidTransactionTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/VoidPreAuthorizationTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VoidPreAuthorizationTst(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("VoidPreAuthorizationTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VoidPreAuthorizationTstAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            this.VoidPreAuthorizationTstAsync(Filiacao, Distribuidor, Total, Data, NumAutor, NumCV, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void VoidPreAuthorizationTstAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.VoidPreAuthorizationTstOperationCompleted == null)) {
                this.VoidPreAuthorizationTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidPreAuthorizationTstOperationCompleted);
            }
            this.InvokeAsync("VoidPreAuthorizationTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd}, this.VoidPreAuthorizationTstOperationCompleted, userState);
        }
        
        private void OnVoidPreAuthorizationTstOperationCompleted(object arg) {
            if ((this.VoidPreAuthorizationTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidPreAuthorizationTstCompleted(this, new VoidPreAuthorizationTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/VoidConfPreAuthorizationTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode VoidConfPreAuthorizationTst(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            object[] results = this.Invoke("VoidConfPreAuthorizationTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void VoidConfPreAuthorizationTstAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd) {
            this.VoidConfPreAuthorizationTstAsync(Filiacao, Distribuidor, Total, Data, NumAutor, NumCV, Concentrador, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void VoidConfPreAuthorizationTstAsync(string Filiacao, string Distribuidor, string Total, string Data, string NumAutor, string NumCV, string Concentrador, string Usr, string Pwd, object userState) {
            if ((this.VoidConfPreAuthorizationTstOperationCompleted == null)) {
                this.VoidConfPreAuthorizationTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVoidConfPreAuthorizationTstOperationCompleted);
            }
            this.InvokeAsync("VoidConfPreAuthorizationTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Total,
                        Data,
                        NumAutor,
                        NumCV,
                        Concentrador,
                        Usr,
                        Pwd}, this.VoidConfPreAuthorizationTstOperationCompleted, userState);
        }
        
        private void OnVoidConfPreAuthorizationTstOperationCompleted(object arg) {
            if ((this.VoidConfPreAuthorizationTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VoidConfPreAuthorizationTstCompleted(this, new VoidConfPreAuthorizationTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/CouncilReportTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode CouncilReportTst(string Filiacao, string Distribuidor, string Data_Inicial, string Data_Final, string Tipo_Trx, string Status_Trx, string Servico_AVS, string Usr, string Pwd) {
            object[] results = this.Invoke("CouncilReportTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Data_Inicial,
                        Data_Final,
                        Tipo_Trx,
                        Status_Trx,
                        Servico_AVS,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void CouncilReportTstAsync(string Filiacao, string Distribuidor, string Data_Inicial, string Data_Final, string Tipo_Trx, string Status_Trx, string Servico_AVS, string Usr, string Pwd) {
            this.CouncilReportTstAsync(Filiacao, Distribuidor, Data_Inicial, Data_Final, Tipo_Trx, Status_Trx, Servico_AVS, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void CouncilReportTstAsync(string Filiacao, string Distribuidor, string Data_Inicial, string Data_Final, string Tipo_Trx, string Status_Trx, string Servico_AVS, string Usr, string Pwd, object userState) {
            if ((this.CouncilReportTstOperationCompleted == null)) {
                this.CouncilReportTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCouncilReportTstOperationCompleted);
            }
            this.InvokeAsync("CouncilReportTst", new object[] {
                        Filiacao,
                        Distribuidor,
                        Data_Inicial,
                        Data_Final,
                        Tipo_Trx,
                        Status_Trx,
                        Servico_AVS,
                        Usr,
                        Pwd}, this.CouncilReportTstOperationCompleted, userState);
        }
        
        private void OnCouncilReportTstOperationCompleted(object arg) {
            if ((this.CouncilReportTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CouncilReportTstCompleted(this, new CouncilReportTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/SalesSummTst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode SalesSummTst(string Filiacao, string Usr, string Pwd) {
            object[] results = this.Invoke("SalesSummTst", new object[] {
                        Filiacao,
                        Usr,
                        Pwd});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void SalesSummTstAsync(string Filiacao, string Usr, string Pwd) {
            this.SalesSummTstAsync(Filiacao, Usr, Pwd, null);
        }
        
        /// <remarks/>
        public void SalesSummTstAsync(string Filiacao, string Usr, string Pwd, object userState) {
            if ((this.SalesSummTstOperationCompleted == null)) {
                this.SalesSummTstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSalesSummTstOperationCompleted);
            }
            this.InvokeAsync("SalesSummTst", new object[] {
                        Filiacao,
                        Usr,
                        Pwd}, this.SalesSummTstOperationCompleted, userState);
        }
        
        private void OnSalesSummTstOperationCompleted(object arg) {
            if ((this.SalesSummTstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SalesSummTstCompleted(this, new SalesSummTstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ecommerce.redecard.com.br/GetAuthorizedCAPtst", RequestNamespace="http://ecommerce.redecard.com.br", ResponseNamespace="http://ecommerce.redecard.com.br", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetAuthorizedCAPtst(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string SecureCode, 
                    string LinkCode, 
                    string Bin, 
                    string Portador, 
                    string IATA, 
                    string Mes, 
                    string Ano, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data) {
            object[] results = this.Invoke("GetAuthorizedCAPtst", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        SecureCode,
                        LinkCode,
                        Bin,
                        Portador,
                        IATA,
                        Mes,
                        Ano,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn,
                        Add_Data});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthorizedCAPtstAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string SecureCode, 
                    string LinkCode, 
                    string Bin, 
                    string Portador, 
                    string IATA, 
                    string Mes, 
                    string Ano, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data) {
            this.GetAuthorizedCAPtstAsync(Total, Transacao, Parcelas, Filiacao, NumPedido, SecureCode, LinkCode, Bin, Portador, IATA, Mes, Ano, Distribuidor, Concentrador, TaxaEmbarque, Entrada, Pax1, Pax2, Pax3, Pax4, Numdoc1, Numdoc2, Numdoc3, Numdoc4, ConfTxn, Add_Data, null);
        }
        
        /// <remarks/>
        public void GetAuthorizedCAPtstAsync(
                    string Total, 
                    string Transacao, 
                    string Parcelas, 
                    string Filiacao, 
                    string NumPedido, 
                    string SecureCode, 
                    string LinkCode, 
                    string Bin, 
                    string Portador, 
                    string IATA, 
                    string Mes, 
                    string Ano, 
                    string Distribuidor, 
                    string Concentrador, 
                    string TaxaEmbarque, 
                    string Entrada, 
                    string Pax1, 
                    string Pax2, 
                    string Pax3, 
                    string Pax4, 
                    string Numdoc1, 
                    string Numdoc2, 
                    string Numdoc3, 
                    string Numdoc4, 
                    string ConfTxn, 
                    string Add_Data, 
                    object userState) {
            if ((this.GetAuthorizedCAPtstOperationCompleted == null)) {
                this.GetAuthorizedCAPtstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthorizedCAPtstOperationCompleted);
            }
            this.InvokeAsync("GetAuthorizedCAPtst", new object[] {
                        Total,
                        Transacao,
                        Parcelas,
                        Filiacao,
                        NumPedido,
                        SecureCode,
                        LinkCode,
                        Bin,
                        Portador,
                        IATA,
                        Mes,
                        Ano,
                        Distribuidor,
                        Concentrador,
                        TaxaEmbarque,
                        Entrada,
                        Pax1,
                        Pax2,
                        Pax3,
                        Pax4,
                        Numdoc1,
                        Numdoc2,
                        Numdoc3,
                        Numdoc4,
                        ConfTxn,
                        Add_Data}, this.GetAuthorizedCAPtstOperationCompleted, userState);
        }
        
        private void OnGetAuthorizedCAPtstOperationCompleted(object arg) {
            if ((this.GetAuthorizedCAPtstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthorizedCAPtstCompleted(this, new GetAuthorizedCAPtstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuthorizedCompletedEventHandler(object sender, GetAuthorizedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuthorized_ADCompletedEventHandler(object sender, GetAuthorized_ADCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorized_ADCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorized_ADCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuthorizedAVSCompletedEventHandler(object sender, GetAuthorizedAVSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizedAVSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizedAVSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConfirmTxnCompletedEventHandler(object sender, ConfirmTxnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmTxnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmTxnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConfirmTxn_ADCompletedEventHandler(object sender, ConfirmTxn_ADCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmTxn_ADCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmTxn_ADCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConfPreAuthorizationCompletedEventHandler(object sender, ConfPreAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfPreAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfPreAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void VoidTransactionCompletedEventHandler(object sender, VoidTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void VoidTransactionDistrCompletedEventHandler(object sender, VoidTransactionDistrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidTransactionDistrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidTransactionDistrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void VoidPreAuthorizationCompletedEventHandler(object sender, VoidPreAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidPreAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidPreAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void VoidConfPreAuthorizationCompletedEventHandler(object sender, VoidConfPreAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidConfPreAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidConfPreAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CouncilReportCompletedEventHandler(object sender, CouncilReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CouncilReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CouncilReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConsFornDistribCompletedEventHandler(object sender, ConsFornDistribCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsFornDistribCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsFornDistribCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SalesSummCompletedEventHandler(object sender, SalesSummCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SalesSummCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SalesSummCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuthorizedCAPCompletedEventHandler(object sender, GetAuthorizedCAPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizedCAPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizedCAPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ReversalTxnCompletedEventHandler(object sender, ReversalTxnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReversalTxnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReversalTxnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuthorizedTstCompletedEventHandler(object sender, GetAuthorizedTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizedTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizedTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuthorizedAVSTstCompletedEventHandler(object sender, GetAuthorizedAVSTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizedAVSTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizedAVSTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConfirmTxnTstCompletedEventHandler(object sender, ConfirmTxnTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmTxnTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmTxnTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ConfPreAuthorizationTstCompletedEventHandler(object sender, ConfPreAuthorizationTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfPreAuthorizationTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfPreAuthorizationTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void VoidTransactionTstCompletedEventHandler(object sender, VoidTransactionTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidTransactionTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidTransactionTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void VoidPreAuthorizationTstCompletedEventHandler(object sender, VoidPreAuthorizationTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidPreAuthorizationTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidPreAuthorizationTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void VoidConfPreAuthorizationTstCompletedEventHandler(object sender, VoidConfPreAuthorizationTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VoidConfPreAuthorizationTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VoidConfPreAuthorizationTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CouncilReportTstCompletedEventHandler(object sender, CouncilReportTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CouncilReportTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CouncilReportTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SalesSummTstCompletedEventHandler(object sender, SalesSummTstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SalesSummTstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SalesSummTstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetAuthorizedCAPtstCompletedEventHandler(object sender, GetAuthorizedCAPtstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthorizedCAPtstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthorizedCAPtstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591